#!/usr/bin/env nextflow
/*
----------------------------------------------------------------------------------------
File    :   modules.config
Time    :   2025/09/23 17:34:09
Author  :   Lei Zheng
Version :   1.0
Contact :   type.zheng@gmail.com
Github  :   https://github.com/typekey
----------------------------------------------------------------------------------------
*/


def rseqc_modules = params.rseqc_modules ? params.rseqc_modules.split(',').collect{ it.trim().toLowerCase() } : []

//
// General configuration options
//

process {
    withName: 'CUSTOM_DUMPSOFTWAREVERSIONS' {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }
}

//
// Genome preparation options
//

process {
    withName: 'GUNZIP_.*|MAKE_TRANSCRIPTS_FASTA' {
        publishDir = [
            path: { params.save_reference ? "${params.outdir}/genome" : params.outdir },
            mode: params.publish_dir_mode,
            saveAs: { filename -> (filename != 'versions.yml' && params.save_reference) ? filename : null }
        ]
    }

    withName: 'UNTAR_.*' {
        ext.args2 = '--no-same-owner'
    }

    withName: 'UNTAR_.*|STAR_GENOMEGENERATE|STAR_GENOMEGENERATE_IGENOMES|HISAT2_BUILD' {
        publishDir = [
            path: { params.save_reference ? "${params.outdir}/genome/index" : params.outdir },
            mode: params.publish_dir_mode,
            saveAs: { filename -> (filename != 'versions.yml' && params.save_reference) ? filename : null }
        ]
    }

    withName: 'GFFREAD' {
        ext.args   = '--keep-exon-attrs -F -T'
        publishDir = [
            path: { params.save_reference ? "${params.outdir}/genome" : params.outdir },
            mode: params.publish_dir_mode,
            saveAs: { filename -> (filename != 'versions.yml' && params.save_reference) ? filename : null }
        ]
    }

    withName: 'HISAT2_EXTRACTSPLICESITES' {
        publishDir = [
            path: { params.save_reference ? "${params.outdir}/genome/index" : params.outdir },
            mode: params.publish_dir_mode,
            saveAs: { filename -> (filename != 'versions.yml' && params.save_reference) ? filename : null }
        ]
    }

    withName: 'SALMON_INDEX' {
        ext.args   = { [
                params.gencode ? '--gencode' : '',
                params.pseudo_aligner_kmer_size ? "-k ${params.pseudo_aligner_kmer_size}": ''
        ].join(' ').trim() }
        publishDir = [
            path: { params.save_reference ? "${params.outdir}/genome/index" : params.outdir },
            mode: params.publish_dir_mode,
            saveAs: { filename -> (filename != 'versions.yml' && params.save_reference) ? filename : null }
        ]
    }

    withName: 'KALLISTO_INDEX' {
        ext.args   = params.pseudo_aligner_kmer_size ? "-k ${params.pseudo_aligner_kmer_size}" : ''
        publishDir = [
            path: { params.save_reference ? "${params.outdir}/genome/index" : params.outdir },
            mode: params.publish_dir_mode,
            saveAs: { filename -> (filename != 'versions.yml' && params.save_reference) ? filename : null }
        ]
    }

    withName: 'RSEM_PREPAREREFERENCE_GENOME' {
        ext.args   = '--star'
        publishDir = [
            path: { params.save_reference ? "${params.outdir}/genome/index" : params.outdir },
            mode: params.publish_dir_mode,
            saveAs: { filename -> (filename != 'versions.yml' && params.save_reference) ? filename : null }
        ]
    }

    withName: 'GTF2BED' {
        publishDir = [
            path: { params.save_reference ? "${params.outdir}/genome" : params.outdir },
            mode: params.publish_dir_mode,
            saveAs: { filename -> (filename != 'versions.yml' && params.save_reference) ? filename : null }
        ]
    }

    withName: 'CAT_ADDITIONAL_FASTA|PREPROCESS_TRANSCRIPTS_FASTA_GENCODE' {
        publishDir = [
            path: { params.save_reference ? "${params.outdir}/genome" : params.outdir },
            mode: params.publish_dir_mode,
            saveAs: { filename -> (filename != 'versions.yml' && params.save_reference) ? filename : null }
        ]
    }

    withName: 'GTF_FILTER' {
        ext.args   = { params.skip_gtf_transcript_filter ?: '--skip_transcript_id_check' }
        publishDir = [
            path: { params.save_reference ? "${params.outdir}/genome" : params.outdir },
            mode: params.publish_dir_mode,
            saveAs: { filename -> (filename != 'versions.yml' && params.save_reference) ? filename : null }
        ]
    }

    withName: 'CUSTOM_GETCHROMSIZES' {
        publishDir = [
            path: { params.save_reference ? "${params.outdir}/genome" : params.outdir },
            mode: params.publish_dir_mode,
            saveAs: { filename -> (filename != 'versions.yml' && params.save_reference) ? filename : null }
        ]
    }

    withName: 'CAT_FASTQ' {
        publishDir = [
            path: { params.save_merged_fastq ? "${params.outdir}/fastq" : params.outdir },
            mode: params.publish_dir_mode,
            saveAs: { filename -> (filename.endsWith('.fastq.gz') && params.save_merged_fastq) ? filename : null }
        ]
    }
}

if (!params.skip_bbsplit && params.bbsplit_fasta_list) {
    process {
        withName: '.*:PREPARE_GENOME:BBMAP_BBSPLIT' {
            ext.args   = 'build=1'
            publishDir = [
                path: { params.save_reference ? "${params.outdir}/genome/index" : params.outdir },
                mode: params.publish_dir_mode,
                saveAs: { filename -> (filename != 'versions.yml' && params.save_reference) ? filename : null }
            ]
        }
    }
}

//
// Read subsampling and strand inferring options
//

process {
    withName: 'FQ_SUBSAMPLE' {
        ext.args   = '--record-count 1000000 --seed 1'
        ext.prefix = { "${meta.id}.subsampled" }
        publishDir = [
            enabled: false
        ]
    }

    withName: '.*:FASTQ_SUBSAMPLE_FQ_SALMON:SALMON_QUANT' {
        ext.args   = '--skipQuant'
        publishDir = [
            enabled: false
        ]
    }
}

//
// Read QC and trimming options
//

if (!(params.skip_fastqc || params.skip_qc)) {
    if (params.trimmer == 'trimgalore') {
        process {
            withName: '.*:FASTQ_FASTQC_UMITOOLS_TRIMGALORE:FASTQC' {
                ext.args   = '--quiet'
            }
        }
    }

    if (params.trimmer == 'fastp') {
        process {
            withName: '.*:FASTQ_FASTQC_UMITOOLS_FASTP:FASTQC_RAW' {
                ext.args   = '--quiet'
            }

            withName: '.*:FASTQ_FASTQC_UMITOOLS_FASTP:FASTQC_TRIM' {
                ext.args   = '--quiet'
                publishDir = [
                    path: { "${params.outdir}/01_prealign/${params.trimmer}/fastqc" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                ]
            }
        }
    }
}

if (!params.skip_trimming) {
    if (params.trimmer == 'trimgalore') {
        process {
            withName: '.*:FASTQ_FASTQC_UMITOOLS_TRIMGALORE:TRIMGALORE' {
                ext.args   = {
                    [
                        "--fastqc_args '-t ${task.cpus}'",
                        params.extra_trimgalore_args ? params.extra_trimgalore_args.split("\\s(?=--)") : ''
                    ].flatten().unique(false).join(' ').trim()
                }
                publishDir = [
                    [
                        path: { "${params.outdir}/01_prealign/${params.trimmer}/fastqc" },
                        mode: params.publish_dir_mode,
                        pattern: "*.{html,zip}"
                    ],
                    [
                        path: { params.save_trimmed ? "${params.outdir}/01_prealign/${params.trimmer}" : params.outdir },
                        mode: params.publish_dir_mode,
                        pattern: "*.fq.gz",
                        saveAs: { params.save_trimmed ? it : null }
                    ],
                    [
                        path: { "${params.outdir}/01_prealign/${params.trimmer}" },
                        mode: params.publish_dir_mode,
                        pattern: "*.txt"
                    ]
                ]
            }
        }
    }

    if (params.trimmer == 'fastp') {
        process {
            withName: '.*:FASTQ_FASTQC_UMITOOLS_FASTP:FASTP' {
                ext.args   = { params.extra_fastp_args ?: '' }
                publishDir = [
                    [
                        path: { "${params.outdir}/01_prealign/${params.trimmer}" },
                        mode: params.publish_dir_mode,
                        pattern: "*.{json,html}"
                    ],
                    [
                        path: { "${params.outdir}/01_prealign/${params.trimmer}/log" },
                        mode: params.publish_dir_mode,
                        pattern: "*.log"
                    ],
                    [
                        path: { params.save_trimmed ? "${params.outdir}/01_prealign/${params.trimmer}" : params.outdir },
                        mode: params.publish_dir_mode,
                        pattern: "*.fastq.gz",
                        saveAs: { params.save_trimmed ? it : null }
                    ]
                ]
            }
        }
    }
}

if (params.with_umi && !params.skip_umi_extract) {
    process {
        withName: 'UMITOOLS_EXTRACT' {
            ext.args   = { [
                    params.umitools_extract_method ? "--extract-method=${params.umitools_extract_method}" : '',
                    params.umitools_bc_pattern     ? "--bc-pattern='${params.umitools_bc_pattern}'" : '',
                    params.umitools_bc_pattern2    ? "--bc-pattern2='${params.umitools_bc_pattern2}'" : '',
                    params.umitools_umi_separator  ? "--umi-separator='${params.umitools_umi_separator}'" : ''
            ].join(' ').trim() }
            publishDir = [
                [
                    path: { "${params.outdir}/umitools" },
                    mode: params.publish_dir_mode,
                    pattern: "*.log"
                ],
                [
                    path: { params.save_umi_intermeds ? "${params.outdir}/umitools" : params.outdir },
                    mode: params.publish_dir_mode,
                    pattern: "*.fastq.gz",
                    saveAs: { params.save_umi_intermeds ? it : null }
                ]
            ]
        }
    }
}

//
// Contaminant removal options
//

if (!params.skip_bbsplit) {
    process {
        withName: 'BBMAP_BBSPLIT' {
            ext.args   = 'build=1 ambiguous2=all maxindel=150000'
            publishDir = [
                [
                    path: { "${params.outdir}/bbsplit" },
                    mode: params.publish_dir_mode,
                    pattern: '*.txt'
                ],
                [
                    path: { params.save_bbsplit_reads ? "${params.outdir}/bbsplit" : params.outdir },
                    mode: params.publish_dir_mode,
                    pattern: '*.fastq.gz',
                    saveAs: { params.save_bbsplit_reads ? it : null }
                ]
            ]
        }
    }
}

if (params.remove_ribo_rna) {
    process {
        withName: 'SORTMERNA' {
            ext.args   = '--num_alignments 1 -v'
            publishDir = [
                [
                    path: { "${params.outdir}/sortmerna" },
                    mode: params.publish_dir_mode,
                    pattern: "*.log"
                ],
                [
                    path: { params.save_non_ribo_reads ? "${params.outdir}/sortmerna" : params.outdir },
                    mode: params.publish_dir_mode,
                    pattern: "*.fastq.gz",
                    saveAs: { params.save_non_ribo_reads ? it : null }
                ]
            ]
        }
    }
}

//
// General alignment options
//

if (!params.skip_alignment) {
    if (!params.skip_bigwig) {
        process {
            withName: 'BEDTOOLS_GENOMECOV' {
                ext.args   = '-split -du'
                publishDir = [
                    enabled: false
                ]
            }

            withName: '.*:BEDGRAPH_BEDCLIP_BEDGRAPHTOBIGWIG_FORWARD:UCSC_BEDCLIP' {
                ext.prefix = { "${meta.id}.clip.forward" }
                publishDir = [
                    enabled: false
                ]
            }

            withName: '.*:BEDGRAPH_BEDCLIP_BEDGRAPHTOBIGWIG_FORWARD:UCSC_BEDGRAPHTOBIGWIG' {
                ext.prefix = { "${meta.id}.forward" }
                publishDir = [
                    path: { "${params.outdir}/${params.aligner}/bigwig" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                ]
            }

            withName: '.*:BEDGRAPH_BEDCLIP_BEDGRAPHTOBIGWIG_REVERSE:UCSC_BEDCLIP' {
                ext.prefix = { "${meta.id}.clip.reverse" }
                publishDir = [
                    enabled: false
                ]
            }

            withName: '.*:BEDGRAPH_BEDCLIP_BEDGRAPHTOBIGWIG_REVERSE:UCSC_BEDGRAPHTOBIGWIG' {
                ext.prefix = { "${meta.id}.reverse" }
                publishDir = [
                    path: { "${params.outdir}/${params.aligner}/bigwig" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                ]
            }
        }
    }

    if (!params.skip_stringtie) {
        process {
            withName: 'STRINGTIE_STRINGTIE' {
                ext.args   = { [
                    '-v',
                    params.stringtie_ignore_gtf ? '' : '-e'
                ].join(' ').trim() }
                publishDir = [
                    path: { "${params.outdir}/${params.aligner}/stringtie" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                ]
            }
        }
    }
}

//
// STAR Salmon alignment options
//

if (!params.skip_alignment && params.aligner == 'star_salmon') {
    process {
        withName: '.*:ALIGN_STAR:STAR_ALIGN|.*:ALIGN_STAR:STAR_ALIGN_IGENOMES' {
            ext.args   = { [
                '--quantMode TranscriptomeSAM',
                '--twopassMode Basic',
                '--outSAMtype BAM Unsorted',
                '--readFilesCommand zcat',
                '--runRNGseed 0',
                '--outFilterMultimapNmax 20',
                '--alignSJDBoverhangMin 1',
                '--outSAMattributes NH HI AS NM MD',
                '--quantTranscriptomeBan Singleend',
                '--outSAMstrandField intronMotif',
                params.save_unaligned ? '--outReadsUnmapped Fastx' : '',
                params.extra_star_align_args ? params.extra_star_align_args.split("\\s(?=--)") : ''
            ].flatten().unique(false).join(' ').trim() }
            publishDir = [
                [
                    path: { "${params.outdir}/02_alignment/raw/log" },
                    mode: params.publish_dir_mode,
                    pattern: '*.{out,tab}'
                ],
                [
                    path: { params.save_align_intermeds ? "${params.outdir}/02_alignment/raw" : params.outdir },
                    mode: params.publish_dir_mode,
                    pattern: '*.bam',
                    saveAs: { params.save_align_intermeds ? it : null }
                ],
                [
                    path: { params.save_unaligned ? "${params.outdir}/02_alignment/raw/unmapped" : params.outdir },
                    mode: params.publish_dir_mode,
                    pattern: '*.fastq.gz',
                    saveAs: { params.save_unaligned ? it : null }
                ]
            ]
        }

        withName: '.*:QUANTIFY_STAR_SALMON:SALMON_QUANT' {
            ext.args   = { params.extra_salmon_quant_args ?: '' }
            publishDir = [
                path: { "${params.outdir}/02_alignment/${params.aligner}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') || filename.endsWith('_meta_info.json') ? null : filename }
            ]
        }

        withName: '.*:QUANTIFY_STAR_SALMON:TX2GENE' {
            publishDir = [
                path: { "${params.outdir}/02_alignment/${params.aligner}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        withName: '.*:QUANTIFY_STAR_SALMON:TXIMPORT' {
            ext.prefix = { "${quant_type}.merged" }
            publishDir = [
                path: { "${params.outdir}/02_alignment/${params.aligner}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        withName: '.*:QUANTIFY_STAR_SALMON:SE_.*' {
            publishDir = [
                path: { "${params.outdir}/02_alignment/${params.aligner}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }

    if (params.with_umi) {
        process {
            withName: '.*:SAMTOOLS_SORT' {
                ext.args   = '-n'
                ext.prefix = { "${meta.id}.umi_dedup.transcriptome" }
                publishDir = [
                    path: { params.save_align_intermeds || params.save_umi_intermeds ? "${params.outdir}/02_alignment/${params.aligner}" : params.outdir },
                    mode: params.publish_dir_mode,
                    pattern: '*.bam',
                    saveAs: { params.save_align_intermeds || params.save_umi_intermeds ? it : null }
                ]
            }

            withName: '.*:UMITOOLS_PREPAREFORSALMON' {
                ext.prefix = { "${meta.id}.umi_dedup.transcriptome.filtered" }
                publishDir = [
                    [
                        path: { "${params.outdir}/02_alignment/${params.aligner}/umitools/log" },
                        mode: params.publish_dir_mode,
                        pattern: '*.log'
                    ],
                    [
                        path: { params.save_align_intermeds || params.save_umi_intermeds ? "${params.outdir}/02_alignment/${params.aligner}" : params.outdir },
                        mode: params.publish_dir_mode,
                        pattern: '*.bam',
                        saveAs: { params.save_align_intermeds || params.save_umi_intermeds ? it : null }
                    ]
                ]
            }

            withName: '.*:BAM_SORT_STATS_SAMTOOLS:SAMTOOLS_SORT' {
                ext.prefix = { "${meta.id}.transcriptome.sorted" }
                publishDir = [
                    path: { params.save_align_intermeds || params.save_umi_intermeds ? "${params.outdir}/02_alignment/${params.aligner}" : params.outdir },
                    mode: params.publish_dir_mode,
                    pattern: '*.bam',
                    saveAs: { params.save_align_intermeds || params.save_umi_intermeds ? it : null }
                ]
            }

            withName: '.*:BAM_SORT_STATS_SAMTOOLS:SAMTOOLS_INDEX' {
                publishDir = [
                    path: { params.save_align_intermeds || params.save_umi_intermeds ? "${params.outdir}/02_alignment/${params.aligner}" : params.outdir },
                    mode: params.publish_dir_mode,
                    pattern: '*.bai',
                    saveAs: { params.save_align_intermeds || params.save_umi_intermeds ? it : null }
                ]
            }

            withName: '.*:BAM_DEDUP_STATS_SAMTOOLS_UMITOOLS_TRANSCRIPTOME:UMITOOLS_DEDUP' {
                ext.args   = { [
                    meta.single_end                 ? '' : '--unpaired-reads=discard --chimeric-pairs=discard',
                    params.umitools_grouping_method ? "--method='${params.umitools_grouping_method}'" : '',
                    params.umitools_umi_separator   ? "--umi-separator='${params.umitools_umi_separator}'" : ''
                ].join(' ').trim() }
                ext.prefix = { "${meta.id}.umi_dedup.transcriptome.sorted" }
                publishDir = [
                    [
                        path: { "${params.outdir}/02_alignment/${params.aligner}/umitools" },
                        mode: params.publish_dir_mode,
                        pattern: '*.tsv'
                    ],
                    [
                        path: { params.save_align_intermeds || params.save_umi_intermeds ? "${params.outdir}/${params.aligner}" : params.outdir },
                        mode: params.publish_dir_mode,
                        pattern: '*.bam',
                        saveAs: { params.save_align_intermeds || params.save_umi_intermeds ? it : null }
                    ]
                ]
            }

            withName: '.*:BAM_DEDUP_STATS_SAMTOOLS_UMITOOLS_TRANSCRIPTOME:SAMTOOLS_INDEX' {
                publishDir = [
                    path: { params.save_align_intermeds || params.save_umi_intermeds ? "${params.outdir}/02_alignment/${params.aligner}" : params.outdir },
                    mode: params.publish_dir_mode,
                    pattern: '*.bai',
                    saveAs: { params.save_align_intermeds || params.save_umi_intermeds ? it : null }
                ]
            }
        }
    }

    if (!params.skip_qc & !params.skip_deseq2_qc) {
        process {
            withName: 'DESEQ2_QC_STAR_SALMON' {
                ext.args   = { [
                    "--id_col 1",
                    "--sample_suffix ''",
                    "--count_col 3",
                    params.deseq2_vst ? '--vst TRUE' : ''
                ].join(' ').trim() }
                ext.args2  = 'star_salmon'
                publishDir = [
                    path: { "${params.outdir}/${params.aligner}/deseq2_qc" },
                    mode: params.publish_dir_mode,
                    pattern: "*{RData,pca.vals.txt,plots.pdf,sample.dists.txt,size_factors,log}"
                ]
            }
        }
    }
}

//
// HISAT2 alignment options
//

if (!params.skip_alignment && params.aligner == 'hisat2') {
    process {
        withName: '.*:FASTQ_ALIGN_HISAT2:HISAT2_ALIGN' {
            ext.args   = '--met-stderr --new-summary --dta'
            publishDir = [
                [
                    path: { "${params.outdir}/02_alignment/${params.aligner}/log" },
                    mode: params.publish_dir_mode,
                    pattern: '*.log'
                ],
                [
                    path: { params.save_align_intermeds ? "${params.outdir}/02_alignment/${params.aligner}" : params.outdir },
                    mode: params.publish_dir_mode,
                    pattern: '*.bam',
                    saveAs: { params.save_align_intermeds ? it : null }
                ],
                [
                    path: { params.save_unaligned ? "${params.outdir}/02_alignment/${params.aligner}/unmapped" : params.outdir },
                    mode: params.publish_dir_mode,
                    pattern: '*.fastq.gz',
                    saveAs: { params.save_unaligned ? it : null }
                ]
            ]
        }
    }
}

//
// Post-alignment QC options
//

if (!params.skip_alignment && !params.skip_qc) {
    if (!params.skip_preseq) {
        process {
            withName: 'PRESEQ_LCEXTRAP' {
                ext.args   = '-verbose -bam -seed 1 -seg_len 100000000'
                publishDir = [
                    [
                        path: { "${params.outdir}/02_alignment/${params.aligner}/preseq" },
                        mode: params.publish_dir_mode,
                        pattern: "*.txt"
                    ],
                    [
                        path: { "${params.outdir}/02_alignment/${params.aligner}/preseq/log" },
                        mode: params.publish_dir_mode,
                        pattern: "*.log"
                    ]
                ]
            }
        }
    }

    if (!params.skip_qualimap) {
        process {
            withName: 'QUALIMAP_RNASEQ' {
                publishDir = [
                    path: { "${params.outdir}/${params.aligner}/qualimap" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                ]
            }
        }
    }

    if (!params.skip_dupradar) {
        process {
            withName: 'DUPRADAR' {
                publishDir = [
                    [
                        path: { "${params.outdir}/${params.aligner}/dupradar/scatter_plot" },
                        mode: params.publish_dir_mode,
                        pattern: "*Dens.pdf"
                    ],
                    [
                        path: { "${params.outdir}/${params.aligner}/dupradar/box_plot" },
                        mode: params.publish_dir_mode,
                        pattern: "*Boxplot.pdf"
                    ],
                    [
                        path: { "${params.outdir}/${params.aligner}/dupradar/histogram" },
                        mode: params.publish_dir_mode,
                        pattern: "*Hist.pdf"
                    ],
                    [
                        path: { "${params.outdir}/${params.aligner}/dupradar/gene_data" },
                        mode: params.publish_dir_mode,
                        pattern: "*Matrix.txt"
                    ],
                    [
                        path: { "${params.outdir}/${params.aligner}/dupradar/intercepts_slope" },
                        mode: params.publish_dir_mode,
                        pattern: "*slope.txt"
                    ]
                ]
            }
        }
    }

    if (!params.skip_biotype_qc && params.featurecounts_group_type) {
        process {
            withName: 'SUBREAD_FEATURECOUNTS' {
                ext.args   = { [
                    '-B -C',
                    params.gencode ? "-g gene_type" : "-g $params.featurecounts_group_type",
                    "-t $params.featurecounts_feature_type"
                ].join(' ').trim() }
                publishDir = [
                    path: { "${params.outdir}/${params.aligner}/featurecounts" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                ]
            }

            withName: 'MULTIQC_CUSTOM_BIOTYPE' {
                publishDir = [
                    path: { "${params.outdir}/${params.aligner}/featurecounts" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                ]
            }
        }
    }

    if (!params.skip_rseqc && 'bam_stat' in rseqc_modules) {
        process {
            withName: '.*:BAM_RSEQC:RSEQC_BAMSTAT' {
                publishDir = [
                    path: { "${params.outdir}/${params.aligner}/rseqc/bam_stat" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                ]
            }
        }
    }

    if (!params.skip_rseqc && 'infer_experiment' in rseqc_modules) {
        process {
            withName: '.*:BAM_RSEQC:RSEQC_INFEREXPERIMENT' {
                publishDir = [
                    path: { "${params.outdir}/${params.aligner}/rseqc/infer_experiment" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                ]
            }
        }
    }

    if (!params.skip_rseqc && 'junction_annotation' in rseqc_modules) {
        process {
            withName: '.*:BAM_RSEQC:RSEQC_JUNCTIONANNOTATION' {
                publishDir = [
                    [
                        path: { "${params.outdir}/${params.aligner}/rseqc/junction_annotation/pdf" },
                        mode: params.publish_dir_mode,
                        pattern: '*.pdf'
                    ],
                    [
                        path: { "${params.outdir}/${params.aligner}/rseqc/junction_annotation/bed" },
                        mode: params.publish_dir_mode,
                        pattern: '*.bed'
                    ],
                    [
                        path: { "${params.outdir}/${params.aligner}/rseqc/junction_annotation/xls" },
                        mode: params.publish_dir_mode,
                        pattern: '*.xls'
                    ],
                    [
                        path: { "${params.outdir}/${params.aligner}/rseqc/junction_annotation/log" },
                        mode: params.publish_dir_mode,
                        pattern: '*.log'
                    ],
                    [
                        path: { "${params.outdir}/${params.aligner}/rseqc/junction_annotation/rscript" },
                        mode: params.publish_dir_mode,
                        pattern: '*.r'
                    ]
                ]
            }
        }
    }

    if (!params.skip_rseqc && 'junction_saturation' in rseqc_modules) {
        process {
            withName: '.*:BAM_RSEQC:RSEQC_JUNCTIONSATURATION' {
                publishDir = [
                    [
                        path: { "${params.outdir}/${params.aligner}/rseqc/junction_saturation/pdf" },
                        mode: params.publish_dir_mode,
                        pattern: '*.pdf'
                    ],
                    [
                        path: { "${params.outdir}/${params.aligner}/rseqc/junction_saturation/rscript" },
                        mode: params.publish_dir_mode,
                        pattern: '*.r'
                    ]
                ]
            }
        }
    }

    if (!params.skip_rseqc && 'read_duplication' in rseqc_modules) {
        process {
            withName: '.*:BAM_RSEQC:RSEQC_READDUPLICATION' {
                publishDir = [
                    [
                        path: { "${params.outdir}/${params.aligner}/rseqc/read_duplication/pdf" },
                        mode: params.publish_dir_mode,
                        pattern: '*.pdf'
                    ],
                    [
                        path: { "${params.outdir}/${params.aligner}/rseqc/read_duplication/xls" },
                        mode: params.publish_dir_mode,
                        pattern: '*.xls'
                    ],
                    [
                        path: { "${params.outdir}/${params.aligner}/rseqc/read_duplication/rscript" },
                        mode: params.publish_dir_mode,
                        pattern: '*.r'
                    ]
                ]
            }
        }
    }

    if (!params.skip_rseqc && 'read_distribution' in rseqc_modules && !params.bam_csi_index) {
        process {
            withName: '.*:BAM_RSEQC:RSEQC_READDISTRIBUTION' {
                publishDir = [
                    path: { "${params.outdir}/${params.aligner}/rseqc/read_distribution" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                ]
            }
        }
    }

    if (!params.skip_rseqc && 'inner_distance' in rseqc_modules && !params.bam_csi_index) {
        process {
            withName: '.*:BAM_RSEQC:RSEQC_INNERDISTANCE' {
                publishDir = [
                    [
                        path: { "${params.outdir}/${params.aligner}/rseqc/inner_distance/txt" },
                        mode: params.publish_dir_mode,
                        pattern: '*.txt',
                        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                    ],
                    [
                        path: { "${params.outdir}/${params.aligner}/rseqc/inner_distance/pdf" },
                        mode: params.publish_dir_mode,
                        pattern: '*.pdf'
                    ],
                    [
                        path: { "${params.outdir}/${params.aligner}/rseqc/inner_distance/rscript" },
                        mode: params.publish_dir_mode,
                        pattern: '*.r'
                    ]
                ]
            }
        }
    }

    if (!params.skip_rseqc && 'tin' in rseqc_modules && !params.bam_csi_index) {
        process {
            withName: '.*:BAM_RSEQC:RSEQC_TIN' {
                publishDir = [
                    path: { "${params.outdir}/${params.aligner}/rseqc/tin" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                ]
            }
        }
    }
}

process {
        withName: 'PURECLIP' {
            publishDir = [
                path: { "${params.outdir}/03_peak/pureclip" },
                mode: params.publish_dir_mode
            ]
        }
    }

if (!params.skip_multiqc) {
    process {
        withName: 'MULTIQC' {
            ext.args   = { params.multiqc_title ? "--title \"$params.multiqc_title\"" : '' }
            ext.prefix = "multiqc_report"
            publishDir = [
                path: { [
                    "${params.outdir}/04_report/multiqc"
                    ].join('') },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
}

//
// Salmon/ Kallisto pseudoalignment options
//

if (!params.skip_pseudo_alignment && params.pseudo_aligner == 'salmon') {
    process {
        withName: '.*:QUANTIFY_PSEUDO_ALIGNMENT:SALMON_QUANT' {
            ext.args   = { params.extra_salmon_quant_args ?: '' }
            publishDir = [
                path: { "${params.outdir}/${params.pseudo_aligner}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') || filename.endsWith('_meta_info.json') ? null : filename }
            ]
        }
    }
}

if (!params.skip_pseudo_alignment && params.pseudo_aligner == 'kallisto') {
    process {
        withName: '.*:QUANTIFY_PSEUDO_ALIGNMENT:KALLISTO_QUANT' {
            ext.args = params.extra_kallisto_quant_args ?: ''
            publishDir = [
                path: { "${params.outdir}/${params.pseudo_aligner}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') || filename.endsWith('.run_info.json') || filename.endsWith('.log') ? null : filename }
            ]
        }
    }
}

if (!params.skip_pseudo_alignment && params.pseudo_aligner) {
    process {
        withName: '.*:QUANTIFY_PSEUDO_ALIGNMENT:TX2GENE' {
            publishDir = [
                path: { "${params.outdir}/${params.pseudo_aligner}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        withName: '.*:QUANTIFY_PSEUDO_ALIGNMENT:TXIMPORT' {
            ext.prefix = { "${quant_type}.merged" }
            publishDir = [
                path: { "${params.outdir}/${params.pseudo_aligner}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        withName: '.*:QUANTIFY_PSEUDO_ALIGNMENT:SE_.*' {
            publishDir = [
                path: { "${params.outdir}/${params.pseudo_aligner}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }

    if (!params.skip_qc & !params.skip_deseq2_qc) {
        process {
            withName: 'DESEQ2_QC_PSEUDO' {
                ext.args   = { [
                    "--id_col 1",
                    "--sample_suffix ''",
                    "--count_col 3",
                    params.deseq2_vst ? '--vst TRUE' : ''
                ].join(' ').trim() }
                ext.args2  = { params.pseudo_aligner }
                publishDir = [
                    path: { "${params.outdir}/${params.pseudo_aligner}/deseq2_qc" },
                    mode: params.publish_dir_mode,
                    pattern: "*{RData,pca.vals.txt,plots.pdf,sample.dists.txt,size_factors,log}"
                ]
            }
        }
    }
}

// Peak calling options
process {
    withName: '.*:DEDUP_CALL_PEAK_STRAND:CALL_PEAK_PLUS' {
        publishDir = [
            path: { "${params.outdir}/03_peak/macs3/plus" },
            mode: params.publish_dir_mode,
            pattern: "*{narrowPeak,xls,bed,broadPeak,gappedPeak}"
        ]
    }
}

process {
    withName: '.*:DEDUP_CALL_PEAK_STRAND:CALL_PEAK_MINUS' {
        publishDir = [
            path: { "${params.outdir}/03_peak/macs3/minus" },
            mode: params.publish_dir_mode,
            pattern: "*{narrowPeak,xls,bed,broadPeak,gappedPeak}"
        ]
    }
}

process {
    withName: '.*:DEDUP_CALL_PEAK_STRAND:MERGE_STRAND' {
        publishDir = [
            path: { "${params.outdir}/03_peak/macs3/merge" },
            mode: params.publish_dir_mode,
            pattern: "*{narrowPeak,xls,bed,broadPeak,gappedPeak}"
        ]
    }
}

process {
    withName: '.*:SPLIT_STRAND' {
        publishDir = []
    }
}

process {
    withName: '.*:CUTADAPT' {
         publishDir = []
    }
}

process {
    withName: '.*:ALIGN_REPEAT_START:BAM_SORT_STATS_SAMTOOLS:SAMTOOLS_SORT' {
        publishDir = [
            path: { "${params.outdir}/02_alignment/raw/repeat" },
            mode: params.publish_dir_mode,
            pattern: "*.bam"
        ]
    }
}

process {
    withName: '.*:ALIGN_REPEAT_START:BAM_SORT_STATS_SAMTOOLS:SAMTOOLS_INDEX' {
        publishDir = [
            path: { "${params.outdir}/02_alignment/raw/repeat" },
            mode: params.publish_dir_mode,
            pattern: "*.bai"
        ]
    }
}

process {
    withName: '.*:ALIGN_GENE_START:BAM_SORT_STATS_SAMTOOLS:SAMTOOLS_SORT' {
        publishDir = [
            path: { "${params.outdir}/02_alignment/raw/gene" },
            mode: params.publish_dir_mode,
            pattern: "*.bam"
        ]
    }
}

process {
    withName: '.*:ALIGN_GENE_START:BAM_SORT_STATS_SAMTOOLS:SAMTOOLS_INDEX' {
        publishDir = [
            path: { "${params.outdir}/02_alignment/raw/gene" },
            mode: params.publish_dir_mode,
            pattern: "*.bai"
        ]
    }
}


process {
    withName: '.*:BAM_DEDUP_STATS_SAMTOOLS_UMITOOLS_REPEAT:UMITOOLS_DEDUP' {
        publishDir = [
            path: { "${params.outdir}/02_alignment/dedup/repeat" },
            mode: params.publish_dir_mode,
            pattern: "*.bam"
        ]
    }
}

process {
    withName: '.*:BAM_DEDUP_STATS_SAMTOOLS_UMITOOLS_REPEAT:SAMTOOLS_INDEX' {
        publishDir = [
            path: { "${params.outdir}/02_alignment/dedup/repeat" },
            mode: params.publish_dir_mode,
            pattern: "*.bai"
        ]
    }
}

process {
    withName: '.*:BAM_DEDUP_STATS_SAMTOOLS_UMITOOLS_GENE:UMITOOLS_DEDUP' {
        publishDir = [
            path: { "${params.outdir}/02_alignment/dedup/gene" },
            mode: params.publish_dir_mode,
            pattern: "*.bam"
        ]
    }
}

process {
    withName: '.*:BAM_DEDUP_STATS_SAMTOOLS_UMITOOLS_GENE:SAMTOOLS_INDEX' {
        publishDir = [
            path: { "${params.outdir}/02_alignment/dedup/gene" },
            mode: params.publish_dir_mode,
            pattern: "*.bai"
        ]
    }
}

process {
    withName: '.*:ALIGN_GENE_START:STAR_GENE_ALIGN' {
        publishDir = []
    }
}



process {
    withName: '.*:EXTRACT_FASTQ' {
        publishDir = [
            path: { "${params.outdir}/01_prealignment/01_extract_fastq" },
            mode: params.publish_dir_mode,
            pattern: "*.fastq.gz"
        ]
    }
}

process {
    withName: '.*:MIRNA_PAIRED' {
        publishDir = [
            path: { "${params.outdir}/01_prealignment/02_mirna_paired" },
            mode: params.publish_dir_mode,
            pattern: "*.{alignment.gz,motif.gz}"
        ]
    }
}


process {
    withName: '.*:FASTQ_FASTQC_UMITOOLS_CUTADAPT_paired2single:EXTRACT_POOL_FASTQ' {
        publishDir = [
            path: { "${params.outdir}/01_prealignment/01_extract_fastq" },
            mode: params.publish_dir_mode,
            pattern: "*.{fastq.gz,fastq}"
        ]
    }
}

process {
    withName: '.*:FASTQ_FASTQC_UMITOOLS_CUTADAPT_paired2single:TRIM_FASTQC' {
        publishDir = [
            [
                path: { "${params.outdir}/01_prealignment/03_fastqc/trimmed" },
                mode: params.publish_dir_mode,
                pattern: "*.{html,zip}"
            ],
            [
                path: { params.save_trimmed ? "${params.outdir}/01_prealignment/03_fastqc/trimmed" : params.outdir },
                mode: params.publish_dir_mode,
                pattern: "*.fq.gz",
                saveAs: { params.save_trimmed ? it : null }
            ],
            [
                path: { "${params.outdir}/01_prealignment/trimmed" },
                mode: params.publish_dir_mode,
                pattern: "*.txt"
            ]
        ]
    }
}

process {
    withName: '.*:FASTQ_FASTQC_UMITOOLS_CUTADAPT_paired2single:FASTQC' {
        publishDir = [
            [
                path: { "${params.outdir}/01_prealignment/03_fastqc/raw" },
                mode: params.publish_dir_mode,
                pattern: "*.{html,zip}"
            ]
        ]
    }
}

process {
    withName: '.*:FASTQSCREEN' {
        publishDir = [
            [
                path: { "${params.outdir}/01_prealignment/04_fastqscreen/" },
                mode: params.publish_dir_mode,
                pattern: "*.{html,txt}"
            ]
        ]
    }
}


process {
    withName: '.*:FEATRURECOUNTS_GENE' {
        publishDir = [
            path: { "${params.outdir}/03_peak/01_featurecounts_annotation/gene" },
            mode: params.publish_dir_mode,
            pattern: "*{count,annotation.txt}"
        ]
    }
}

process {
    withName: '.*:FEATRURECOUNTS_REPEAT' {
        publishDir = [
            path: { "${params.outdir}/03_peak/01_featurecounts_annotation/repeat" },
            mode: params.publish_dir_mode,
            pattern: "*{count,annotation.txt}"
        ]
    }
}


process {
    withName: '.*:BEDTOOLS_CALL_PEAK' {
        publishDir = [
            path: { "${params.outdir}/03_peak/02_bedtools_cluster" },
            mode: params.publish_dir_mode,
            pattern: "*.filter.bed"
        ]
    }
}

process {
    withName: '.*:GENE_ANNOTATION_PEAK' {
        publishDir = [
            path: { "${params.outdir}/03_peak/03_annotation/annotatepeaks" },
            mode: params.publish_dir_mode,
            pattern: "*.annotatePeaks.txt"
        ]
    }
}


process {
    withName: '.*:GENE_ANNOTATION_PEAK_CHIPSEEKER' {
        publishDir = [
            path: { "${params.outdir}/03_peak/03_annotation/chipseeker" },
            mode: params.publish_dir_mode,
            pattern: "*.anno.chipseeker.tsv"
        ]
    }
}

process {
    withName: '.*:PLOT_PEAK_ANNOTATION_CHIPSEEKER' {
        publishDir = [
            path: { "${params.outdir}/03_peak/03_annotation/chipseeker" },
            mode: params.publish_dir_mode,
            pattern: "*.pdf"
        ]
    }
}


// call peak -------------------------------------------------------------------------------
process {
    withName: '.*:RAW_CALL_PEAK:MACS3_CALLPEAK' {
        publishDir = [
            path: { "${params.outdir}/03_peak/macs3/raw" },
            mode: params.publish_dir_mode,
            pattern: "*{narrowPeak,xls,bed,broadPeak,gappedPeak}"
        ]
    }
}

process {
    withName: '.*:DEDUP_CALL_PEAK:MACS3_CALLPEAK' {
        publishDir = [
            path: { "${params.outdir}/03_peak/macs3/dedup" },
            mode: params.publish_dir_mode,
            pattern: "*{narrowPeak,xls,bed,broadPeak,gappedPeak}"
        ]
    }
}

process {
    withName: 'ZL:MeRIP:DEDUP_CALL_PEAK_STRAND:MERGE_STRAND' {
        publishDir = [
            path: { "${params.outdir}/03_peak/macs3/dedup_strand" },
            mode:params.publish_dir_mode,
            pattern: "*.bed"
        ]
    }
}

process {
    withName: 'ZL:MeRIP:RAW_CALL_PEAK_STRAND:MERGE_STRAND' {
        publishDir = [
            path: { "${params.outdir}/03_peak/macs3/raw_strand" },
            mode:params.publish_dir_mode,
            pattern: "*.bed"
        ]
    }
}





// deduplication -----------------------------------------------------------------------
if (!params.skip_markduplicates && !params.with_umi) {
    // just mark duplicates
    if (params.duplication_mode == 'markdup') {
        process {
            withName: '.*:BAM_MARKDUPLICATES_PICARD:PICARD_MARKDUPLICATES' {
                ext.args   = '--ASSUME_SORTED true --REMOVE_DUPLICATES false --VALIDATION_STRINGENCY LENIENT --TMP_DIR tmp'
                ext.prefix = { "${meta.id}.markdup.sorted" }
                publishDir = [
                    [
                        path: { "${params.outdir}/02_alignment/dedup/metrics" },
                        mode: params.publish_dir_mode,
                        pattern: '*metrics.txt'
                    ],
                    [
                        path: { "${params.outdir}/02_alignment/dedup" },
                        mode: params.publish_dir_mode,
                        pattern: '*.bam'
                    ]
                ]
            }

            withName: '.*:BAM_MARKDUPLICATES_PICARD:SAMTOOLS_INDEX' {
                ext.args   = { params.bam_csi_index ? '-c' : '' }
                ext.prefix = { "${meta.id}.markdup.sorted" }
                publishDir = [
                    path: { "${params.outdir}/02_alignment/dedup" },
                    mode: params.publish_dir_mode,
                    pattern: '*.{bai,csi}'
                ]
            }

            withName: '.*:BAM_MARKDUPLICATES_PICARD:BAM_STATS_SAMTOOLS:.*' {
                ext.prefix = { "${meta.id}.markdup.sorted.bam" }
                publishDir = [
                    path: { "${params.outdir}/02_alignment/dedup/samtools_stats" },
                    mode: params.publish_dir_mode,
                    pattern: '*.{stats,flagstat,idxstats}'
                ]
            }
        }
    }
    

    // mark duplicates and remove them
    if (params.duplication_mode == 'remove') {
        process {
            withName: '.*:BAM_MARKDUPLICATES_PICARD:PICARD_MARKDUPLICATES' {
                ext.args   = '--ASSUME_SORTED true --REMOVE_DUPLICATES true --VALIDATION_STRINGENCY LENIENT --TMP_DIR tmp'
                ext.prefix = { "${meta.id}.rmdup.sorted" }
                publishDir = [
                    [
                        path: { "${params.outdir}/02_alignment/dedup/metrics" },
                        mode: params.publish_dir_mode,
                        pattern: '*metrics.txt'
                    ],
                    [
                        path: { "${params.outdir}/02_alignment/dedup" },
                        mode: params.publish_dir_mode,
                        pattern: '*.bam'
                    ]
                ]
            }

            withName: '.*:BAM_MARKDUPLICATES_PICARD:SAMTOOLS_INDEX' {
                ext.args   = { params.bam_csi_index ? '-c' : '' }
                ext.prefix = { "${meta.id}.rmdup.sorted" }
                publishDir = [
                    path: { "${params.outdir}/02_alignment/dedup" },
                    mode: params.publish_dir_mode,
                    pattern: '*.{bai,csi}'
                ]
            }

            withName: '.*:BAM_MARKDUPLICATES_PICARD:BAM_STATS_SAMTOOLS:.*' {
                ext.prefix = { "${meta.id}.rmdup.sorted.bam" }
                publishDir = [
                    path: { "${params.outdir}/02_alignment/dedup/samtools_stats" },
                    mode: params.publish_dir_mode,
                    pattern: '*.{stats,flagstat,idxstats}'
                ]
            }
        }
    }
}

process {
    withName: 'UMITOOLS_DEDUP' {
        publishDir = [
            path: { "${params.outdir}/02_alignment/dedup" },
            mode: params.publish_dir_mode,
            pattern: "*{log,sorted.bam,bam.bai}"
        ]
    }
}

process {
    withName: 'HOMER_MOTIF' {
        publishDir = [
            path: { "${params.outdir}/03_peak/motif" },
            mode: params.publish_dir_mode,
            pattern: "*"
        ]
    }
}

process {
    withName: 'HOMER_ANNOTATEPEAKS' {
        publishDir = [
            path: { "${params.outdir}/03_peak/annotation" },
            mode: params.publish_dir_mode,
            pattern: "*"
        ]
    }
}

